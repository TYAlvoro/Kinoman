import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import *
import asyncio
import json
import sqlite3
import strings
from defines import *
import os

# —É—Å—Ç–∞–Ω–æ–≤–∏–ª —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# —Å–æ–∑–¥–∞–ª –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
connection = sqlite3.connect('films.sqlite3')
cursor = connection.cursor()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_handler(msg: types.Message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")

    await msg.answer(
        "üé¨ –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ö–∏–Ω–æ–ú–∞–Ω! üçø\n\n"
        "–Ø –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–µ –∏ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ —Ñ–∏–ª—å–º –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å, "
        "–∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∏—Ç —Ç–µ–±—è —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º! üòäüé•"
        "\n\n–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä –∫–∏–Ω–æ –≤–º–µ—Å—Ç–µ —Å –ö–∏–Ω–æ–ú–∞–Ω! üåü"
    )
    await msg.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /help. –Ø –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å! üòäü§ñ")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥–∞ /help
@dp.message_handler(commands=['help'])
async def help_handler(msg: types.Message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
    instructions = """
/film - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
/search - –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n
–ï—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –µ–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å, –∫–ª–∏–∫–Ω—É–≤ –Ω–∞ –∑–Ω–∞—á–æ–∫ —Ä—è–¥–æ–º —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—á–µ—Ç—ã—Ä–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ).\n
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è: @alvoro44\n
–í–ø–µ—Ä–µ–¥, –∫ –Ω–æ–≤—ã–º –∫–∏–Ω–æ–ª–µ–Ω—Ç–∞–º! üåüüé•
"""
    await msg.answer(instructions)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥–∞ /film
@dp.message_handler(commands=['film'])
async def film_handler(msg: types.Message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /film")
    await msg.answer("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ñ–∏–ª—å–º –≤–º–µ—Å—Ç–µ! üéâüé•üòä")

    # –ø–æ–ª—É—á–∞—é id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    id = str(msg.from_user.id)
    
    # —Å—á–∏—Ç—ã–≤–∞—é json-—Ñ–∞–π–ª —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    # –¥–æ–±–∞–≤–ª—è—é id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ json-—Ñ–∞–π–ª –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    if id not in existing_data:
        new_data = {
            id: {
                "genre": [],
                "duration": [],
                "year": [],
                "country": [],
                "rate_kp": [],
                "rate_imdb": [],
                "age_limit": [],
                "series": False,
                "stage_number": 1,
                "viewed": [],
                "search": False,
                "films_list": [], 
                "current": 0
            }
        }
        existing_data.update(new_data)
    else:
        existing_data[id]["genre"] = []
        existing_data[id]["duration"] = []
        existing_data[id]["year"] = []
        existing_data[id]["country"] = []
        existing_data[id]["rate_kp"] = []
        existing_data[id]["rate_imdb"] = []
        existing_data[id]["age_limit"] = []
        existing_data[id]["series"] = False
        existing_data[id]["stage_number"] = 1      
        existing_data[id]["search"] = False
        existing_data[id]["films_list"] = []
        existing_data[id]["current"] = 0  

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)

    # —Å–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = strings.countries
    keyboard.add(*buttons)
    
    await msg.answer("–ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞: –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —Ñ–∏–ª—å–º–∞. –ò –ø–æ–º–Ω–∏: —á–µ–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä! –ü–æ–µ—Ö–∞–ª–∏! üåüüé¨üåç", reply_markup=keyboard)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã
@dp.message_handler(lambda msg: msg.text in strings.countries[:-1])
async def country_handler(msg: types.Message):

    id = str(msg.from_user.id)

    # –∑–∞–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω—ã
    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    country = country_decoder[msg.text]

    if country not in existing_data[id]['country']:
        existing_data[id]['country'].append(country)
    else:
        await msg.reply("–û–π! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç—É —Å—Ç—Ä–∞–Ω—É. üôà –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é! üòä")

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–∞
@dp.message_handler(lambda msg: msg.text in strings.genres[:-1])
async def genre_handler(msg: types.Message):

    id = str(msg.from_user.id)

    # –∑–∞–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å –∂–∞–Ω—Ä–∞
    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    genre = genre_decoder[msg.text]

    if genre not in existing_data[id]['genre']:
        existing_data[id]['genre'].append(genre)
    else:
        await msg.reply("–û–π! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –¥–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞! üé¨üåüüòä")

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@dp.message_handler(lambda msg: msg.text in strings.durations[:-1])
async def duration_handler(msg: types.Message):

    id = str(msg.from_user.id)

    # –∑–∞–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    duration = duration_decoder[msg.text]

    if duration not in existing_data[id]['duration']:
        existing_data[id]['duration'].append(duration)
    else:
        await msg.reply("–û–π! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞! üé¨üåüüòä")

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
@dp.message_handler(lambda msg: msg.text in strings.years[:-1])
async def year_handler(msg: types.Message):

    id = str(msg.from_user.id)

    # –∑–∞–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    year = year_decoder[msg.text]

    if year not in existing_data[id]['year']:
        existing_data[id]['year'].append(year)
    else:
        await msg.reply("–û–π! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞! üé¨üåüüòä")

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
@dp.message_handler(lambda msg: msg.text in strings.ages[:-1])
async def age_handler(msg: types.Message):

    id = str(msg.from_user.id)

    # –∑–∞–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    age = age_decoder[msg.text]

    if age not in existing_data[id]['age_limit']:
        existing_data[id]['age_limit'].append(age.split("+")[0])
    else:
        await msg.reply("–û–π! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞! üé¨üåüüòä")

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ
@dp.message_handler(lambda msg: msg.text in strings.rate_kp[:-1])
async def rate_kp_handler(msg: types.Message):

    id = str(msg.from_user.id)

    # –∑–∞–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    rate_kp = rate_kp_decoder[msg.text]

    if rate_kp not in existing_data[id]['rate_kp']:
        existing_data[id]['rate_kp'].append(rate_kp)
    else:
        await msg.reply("–û–π! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞! üé¨üåüüòä")

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ IMDB
@dp.message_handler(lambda msg: msg.text in strings.rate_imdb[:-1])
async def rate_imdb_handler(msg: types.Message):

    id = str(msg.from_user.id)

    # –∑–∞–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    rate_imdb = rate_imdb_decoder[msg.text]

    if rate_imdb not in existing_data[id]['rate_imdb']:
        existing_data[id]['rate_imdb'].append(rate_imdb)
    else:
        await msg.reply("–û–π! –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞! üé¨üåüüòä")        

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–ª–∞–≤–∏—à—É "–î–∞–ª–µ–µ >>"
@dp.message_handler(lambda msg: msg.text == "–î–∞–ª–µ–µ >>")
async def continue_handler(msg: types.Message):

    id = str(msg.from_user.id)

    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)

    if existing_data[id]['stage_number'] == 1:
        existing_data[id]['stage_number'] = 2
        await msg.answer("–û—Ç–ª–∏—á–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons =  strings.genres
        keyboard.add(*buttons)
        await msg.answer("–ê –∫–∞–∫ –Ω–∞—Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã? –ü–æ–¥ –æ–¥–µ—è–ª–æ–º —Å —á–∞—à–∫–æ–π —á–∞—è –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –º–µ–ª–æ–¥—Ä–∞–º–æ–π, –∏–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, —Å –ø–æ–ø–∫–æ—Ä–Ω–æ–º –≤ —Ä—É–∫–∞—Ö –∏ –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–æ–º –æ—Ç –±–æ–µ–≤–∏–∫–∞? –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –≤—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π! üòäüé•", reply_markup=keyboard)

    elif existing_data[id]['stage_number'] == 2:
        existing_data[id]['stage_number'] = 3
        await msg.answer("–ñ–∞–Ω—Ä –≤—ã–±—Ä–∞–Ω!", reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = strings.durations
        keyboard.add(*buttons)
        await msg.answer("–ê—Ö, —ç—Ç–æ —Ç—Ä—É–¥–Ω—ã–π –≤—ã–±–æ—Ä! ü§î –° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, \"–±—ã—Å—Ç—Ä–∞—è –ø–æ—Ä—Ü–∏—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è\" –∑–≤—É—á–∏—Ç –∑–∞–º–∞–Ω—á–∏–≤–æ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–∏–ª—å–º, –∏ —Ç—ã —É–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. ‚è±Ô∏èüçø –° –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ –¥–æ–ª–≥–æ–π –∫–∞—Ä—Ç–∏–Ω–æ–π –ø–æ–¥–∞—Ä–∏—Ç —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –≥–µ—Ä–æ–µ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏. üåüüé• –ß—Ç–æ —Å–∫–∞–∂–µ—à—å?", reply_markup=keyboard)

    elif existing_data[id]['stage_number'] == 3:
        existing_data[id]['stage_number'] = 4
        await msg.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = strings.years
        keyboard.add(*buttons)
        await msg.answer("–ï—Å–ª–∏ –±—ã —è –≤—ã–±–∏—Ä–∞–ª, —Ç–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –ø—Ä–µ–¥–ø–æ—á–µ–ª –±—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≥—Ä–∞—Ñ–∏–∫—É –∏ —Å–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã. üöÄüåü –ù–æ, –∫–æ–Ω–µ—á–Ω–æ, —ç—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚Äî –∏–Ω–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –¥–æ–±—Ä–æ–π —Å—Ç–∞—Ä–æ–π –∫–∏–Ω–æ–ø–ª–µ–Ω–∫–∏. –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π, –∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–±–µ—â–∞—é—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è! üòäüçø", reply_markup=keyboard)

    elif existing_data[id]['stage_number'] == 4:
        existing_data[id]['stage_number'] = 5
        await msg.answer("–≠–ø–æ—Ö–∞ –≤—ã–±—Ä–∞–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = strings.ages
        keyboard.add(*buttons)
        await msg.answer("–†–∞–∑–¥—É–º—ã–≤–∞–µ–º, —É—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–º–µ–π–Ω—ã–π –∫–∏–Ω–æ—Å–µ–∞–Ω—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –≤–∑—Ä–æ—Å–ª—ã–π —Å—é–∂–µ—Ç? üòäüçø –ß—Ç–æ –Ω–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è? ü§îüîû", reply_markup=keyboard)

    elif existing_data[id]['stage_number'] == 5:
        existing_data[id]['stage_number'] = 6
        await msg.answer("–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = strings.rate_kp
        keyboard.add(*buttons)
        await msg.answer("–ï—Å–ª–∏ –±—ã —è –º–æ–≥ –≤—ã–±–∏—Ä–∞—Ç—å, —Ç–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –ø—Ä–µ–¥–ø–æ—á–µ–ª –±—ã —Ñ–∏–ª—å–º —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ –æ—Ç 7 –∏ –≤—ã—à–µ, —á—Ç–æ–±—ã –∏–º–µ—Ç—å —Ö–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∫–∏–Ω–æ. üåüüé• –û–¥–Ω–∞–∫–æ, –∫–∞–∫ –º—ã –∑–Ω–∞–µ–º, —Ä–µ–π—Ç–∏–Ω–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º–∏, –∏ –∏–Ω–æ–≥–¥–∞ –¥–∞–∂–µ —Ñ–∏–ª—å–º—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –º–æ–≥—É—Ç –ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤–∏—Ç—å. üòäüçø", reply_markup=keyboard)

    elif existing_data[id]['stage_number'] == 6:
        existing_data[id]['stage_number'] = 7
        await msg.answer("–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ –≤—ã–±—Ä–∞–Ω!", reply_markup=types.ReplyKeyboardRemove())
        await asyncio.sleep(1)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = strings.rate_imdb
        keyboard.add(*buttons)
        await msg.answer("–ï—Å–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–∞ IMDB ‚Äî –≤—Å–µ–º–∏—Ä–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∏–Ω–æ–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —Ç–æ –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ, –∫–∞–∫ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø—É–Ω–∫—Ç–µ, —Ä–µ–π—Ç–∏–Ω–≥–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ª—é–¥—å–º–∏ –∏ –º–æ–≥—É—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∞–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–∞. –†–µ–π—Ç–∏–Ω–≥–∏ —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–∏–Ω –∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤, –∏ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ ‚Äî –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º! üòäüçø", reply_markup=keyboard)

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–ª–∞–≤–∏—à—É "–î–∞–ª–µ–µ >>"
@dp.message_handler(lambda msg: msg.text == "–ì–æ—Ç–æ–≤–æ")
async def done_handler(msg: types.Message):
    global cursor
    try:
        await msg.answer("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫, –≥–æ—Ç–æ–≤—å—Å—è, –≤–µ–¥—å —Å–∫–æ—Ä–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É –∫–∏–Ω–æ! üïµÔ∏è‚Äç‚ôÇÔ∏èüé•", reply_markup=types.ReplyKeyboardRemove())
        id = str(msg.from_user.id)

        with open('requests_info.json', 'r', encoding='utf-8') as json_file:
            existing_data = json.load(json_file)

        if len(existing_data[id]["genre"]) == 0 or "–õ—é–±–æ–π üìΩÔ∏è" in existing_data[id]["genre"]:
            genre_list = ["–±–∏–æ–≥—Ä–∞—Ñ–∏—è", "–±–æ–µ–≤–∏–∫", "–≤–µ—Å—Ç–µ—Ä–Ω", "–≤–æ–µ–Ω–Ω—ã–π", "–¥–µ—Ç–µ–∫—Ç–∏–≤", "–º—É–ª—å—Ç", "–¥–æ–∫", "–¥—Ä–∞–º–∞", "–∏—Å—Ç–æ—Ä–∏—è", "–∫–æ–º–µ–¥–∏—è", "–∫—Ä–∏–º–∏–Ω–∞–ª", "–º–µ–ª–æ–¥—Ä–∞–º–∞", "–º—é–∑–∏–∫–ª", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "—Å–µ–º–µ–π–Ω—ã–π", "—Å–ø–æ—Ä—Ç", "—Ç—Ä–∏–ª–ª–µ—Ä", "—É–∂–∞—Å—ã", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ñ—ç–Ω—Ç–µ–∑–∏"]
        else:
            genre_list = existing_data[id]["genre"]    

        if len(existing_data[id]["country"]) == 0 or "–õ—é–±–∞—è" in existing_data[id]["country"]:
            country_list = ["–†–æ—Å—Å–∏—è", "–°–®–ê", "–ë—Ä–∏—Ç–∞–Ω–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–ò—Ç–∞–ª–∏—è"]
        else:
            country_list = existing_data[id]["country"]

        if len(existing_data[id]["age_limit"]) == 0 or "–õ—é–±–æ–µ üÜó" in existing_data[id]["age_limit"]:
            age_list = ["0", "6", "12", "16", "18"]
        else:
            age_list = existing_data[id]["age_limit"]

        duration_range = duration_converter(existing_data[id]["duration"])
        year_range = year_converter(existing_data[id]["year"])
        min_kp = rate_kp_converter(existing_data[id]["rate_kp"])
        min_imdb = rate_imdb_converter(existing_data[id]["rate_imdb"])

        query = "SELECT * FROM films WHERE " + \
            "(" + " OR ".join(["country LIKE ?"] * len(country_list)) + ")" + \
            " AND " + \
            "(" + " OR ".join(["genre LIKE ?"] * len(genre_list)) + ")" + \
            " AND " + \
            "duration >= ? AND duration <= ?" + \
            " AND " + \
            "year >= ? AND year <= ?" + \
            " AND " + \
            "(" + " OR ".join(["age_limit LIKE ?"] * len(age_list)) + ")" + \
            " AND " + \
            "rate_kp >= ?" + \
            " AND " + \
            "rate_imdb >= ?"

        countries = ["%" + item + "%" for item in country_list]
        genres = ["%" + item + "%" for item in genre_list]
        ages = ["%" + item + "%" for item in age_list]
        rates = [float(min_kp), float(min_imdb)]
        result = cursor.execute(query, countries + genres + duration_range + year_range + ages + rates).fetchall()

        if result:
            existing_data[id]["films_list"] = [x[0] for x in result if x[0] not in existing_data[id]["viewed"]]
            
            for film in result:
                if film[0] not in existing_data[id]["viewed"]:
                    name = f"<i>{film[1]}</i> ({film[4]})"
                    genre = f"<b>–ñ–∞–Ω—Ä—ã:</b> <i>{', '.join(film[2].split(';'))}</i>"
                    duration = f"<b>{human_duration(film[3])}</b>"
                    country = f"<b>–°—Ç—Ä–∞–Ω—ã-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏:</b> <i>{', '.join(film[5].split(';'))}</i>"
                    rate_kp = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ:</b> {film[6]}"
                    rate_imdb = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ IMDB:</b> {film[7]}"
                    age_limit = f"<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {film[11]}+</b>"
                    description = f"<i>{film[8]}</i>"
                    trailer_link = "<u><a href='" + film[9] + "'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä</a></u>"
                    soundtrack_link = "<u><a href='" + film[10] + "'>–ü–æ—Å–ª—É—à–∞—Ç—å —Å–∞—É–Ω–¥—Ç—Ä–µ–∫</a></u>"

                    message = f"üé¨ {name}\n"
                    message += f"üåç {country}\n"
                    message += f"üé∂ {genre}\n"
                    message += f"‚è±Ô∏è {duration}\n"
                    message += f"üîû {age_limit}\n\n"
                    message += f"{description}\n\n"
                    message += f"üìä {rate_kp}\n"
                    message += f"üìà {rate_imdb}\n\n"
                    message += f"üé• {trailer_link}\n"
                    message += f"üéµ {soundtrack_link}"

                    photo_name = get_image_from_url(film[13])
                    existing_data[id]["current"] = film[0]
                    keyboard = types.InlineKeyboardMarkup(row_width=2)
                    keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω ‚úÖ", callback_data="viewed"))
                    keyboard.add(types.InlineKeyboardButton(text="–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å ‚ùå", callback_data="bad_recommendation"))
                    keyboard.add(types.InlineKeyboardButton(text="–ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç ‚û°Ô∏è", callback_data="next_film"))
                    with open(photo_name, "rb") as photo_file:
                        await bot.send_photo(chat_id=msg.chat.id, photo=types.InputFile(photo_file), caption=message, parse_mode="HTML", reply_markup=keyboard)
                    os.remove(photo_name)
                    break
            else:
                await msg.answer("–û–π! üòä –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–µ–Ω—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! üé¨ –ú—ã —É—Å–µ—Ä–¥–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –Ω–∞—à—É –±–∞–∑—É —Ñ–∏–ª—å–º–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∏–Ω–æ–ª–µ–Ω—Ç—ã! üéâ")
                    
        else:
            await msg.answer("–û–π! üòä –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! üé¨ –ú—ã —É—Å–µ—Ä–¥–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –Ω–∞—à—É –±–∞–∑—É —Ñ–∏–ª—å–º–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∏–Ω–æ–ª–µ–Ω—Ç—ã! üéâ \n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /film, –∏ –º—ã –Ω–∞—á–Ω–µ–º –ø–æ–∏—Å–∫! –ü–æ–º–Ω–∏: —á–µ–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üòäüîç")
            with open("bad_requests.txt", 'a', encoding="utf-8") as text_file:
                text_file.write(str(existing_data[id]))
                text_file.write("\n")

        with open('requests_info.json', 'w', encoding='utf-8') as json_file:
            json.dump(existing_data, json_file, indent=4, ensure_ascii=False)

    except Exception as e:
        await msg.answer("–û–π, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –Ω–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—à–∏–±–∫–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ò—Å–∫—Ä–µ–Ω–Ω–µ –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å. üòäüõ†Ô∏è")
        with open("errors.txt", 'a', encoding="utf-8") as text_file:
            text_file.write(str(e) + str(existing_data[id]))
            text_file.write("\n")


@dp.message_handler(commands=['search'])
async def search_handler(msg: types.Message):

    id = str(msg.from_user.id)
    
    await msg.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! üòäüé¨")

    with open('requests_info.json', 'r', encoding='utf-8') as json_file:
        existing_data = json.load(json_file)
    
    existing_data[id]["search"] = True

    with open('requests_info.json', 'w', encoding='utf-8') as json_file:
        json.dump(existing_data, json_file, indent=4, ensure_ascii=False)    


@dp.message_handler()
async def all_handler(msg: types.Message):
    try:
        with open('requests_info.json', 'r', encoding='utf-8') as json_file:
            existing_data = json.load(json_file)

        id = str(msg.from_user.id)

        if existing_data[id]["search"]:
            film_name_cap = f"%{msg.text.capitalize()}%"
            film_name = f"%{msg.text}%"
            query = "SELECT * FROM films WHERE name LIKE ? OR name LIKE ?"
            result = cursor.execute(query, (film_name_cap, film_name)).fetchall()

            if len(result) > 0:
                for film in result:
                    name = f"<i>{film[1]}</i> ({film[4]})"
                    genre = f"<b>–ñ–∞–Ω—Ä—ã:</b> <i>{', '.join(film[2].split(';'))}</i>"
                    duration = f"<b>{human_duration(film[3])}</b>"
                    country = f"<b>–°—Ç—Ä–∞–Ω—ã-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏:</b> <i>{', '.join(film[5].split(';'))}</i>"
                    rate_kp = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ:</b> {film[6]}"
                    rate_imdb = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ IMDB:</b> {film[7]}"
                    age_limit = f"<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {film[11]}+</b>"
                    description = f"<i>{film[8]}</i>"
                    trailer_link = "<u><a href='" + film[9] + "'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä</a></u>"
                    soundtrack_link = "<u><a href='" + film[10] + "'>–ü–æ—Å–ª—É—à–∞—Ç—å —Å–∞—É–Ω–¥—Ç—Ä–µ–∫</a></u>"

                    message = f"üé¨ {name}\n"
                    message += f"üåç {country}\n"
                    message += f"üé∂ {genre}\n"
                    message += f"‚è±Ô∏è {duration}\n"
                    message += f"üîû {age_limit}\n\n"
                    message += f"{description}\n\n"
                    message += f"üìä {rate_kp}\n"
                    message += f"üìà {rate_imdb}\n\n"
                    message += f"üé• {trailer_link}\n"
                    message += f"üéµ {soundtrack_link}"

                    photo_name = get_image_from_url(film[13])
                    existing_data[id]["current"] = film[0]
                    keyboard = types.InlineKeyboardMarkup(row_width=2)
                    keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω ‚úÖ", callback_data="viewed"))
                    with open(photo_name, "rb") as photo_file:
                        await bot.send_photo(chat_id=msg.chat.id, photo=types.InputFile(photo_file), caption=message, parse_mode="HTML", reply_markup=keyboard)
                    os.remove(photo_name)
            else:
                await msg.reply("–û–π! üòä –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! üé¨ –ú—ã —É—Å–µ—Ä–¥–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –Ω–∞—à—É –±–∞–∑—É —Ñ–∏–ª—å–º–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∏–Ω–æ–ª–µ–Ω—Ç—ã! üéâ")

        else:
            await msg.reply("–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è —Å —Ç–æ—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /help ‚Äî –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É! üòäüîç")
    
    except Exception as e:
        await msg.answer("–û–π, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –Ω–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—à–∏–±–∫–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ò—Å–∫—Ä–µ–Ω–Ω–µ –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å. üòäüõ†Ô∏è")
        with open("errors.txt", 'a', encoding="utf-8") as text_file:
            text_file.write(str(e) + ' ' + msg.text)
            text_file.write("\n")


@dp.callback_query_handler(text="viewed")
async def viewed_handler(call: types.CallbackQuery):
    try:
        id = str(call.from_user.id)
        flag = True
        with open('requests_info.json', 'r', encoding='utf-8') as json_file:
            existing_data = json.load(json_file)

        if not existing_data[id]["search"]:
            await call.message.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ!")
            await call.message.answer("–ò—â—É –Ω–æ–≤—ã–π...")
            existing_data[id]["viewed"].append(existing_data[id]["current"])
            existing_data[id]["films_list"].pop(0)
            if len(existing_data[id]["films_list"]) > 0:
                existing_data[id]["current"] = existing_data[id]["films_list"][0]
            else:
                flag = False
            await call.answer()
            await call.message.edit_reply_markup(reply_markup=None)

            if flag:
                query = "SELECT * FROM films WHERE id = ?"
                result = cursor.execute(query, (existing_data[id]["current"],)).fetchall()
                film = result[0]
                name = f"<i>{film[1]}</i> ({film[4]})"
                genre = f"<b>–ñ–∞–Ω—Ä—ã:</b> <i>{', '.join(film[2].split(';'))}</i>"
                duration = f"<b>{human_duration(film[3])}</b>"
                country = f"<b>–°—Ç—Ä–∞–Ω—ã-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏:</b> <i>{', '.join(film[5].split(';'))}</i>"
                rate_kp = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ:</b> {film[6]}"
                rate_imdb = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ IMDB:</b> {film[7]}"
                age_limit = f"<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {film[11]}+</b>"
                description = f"<i>{film[8]}</i>"
                trailer_link = "<u><a href='" + film[9] + "'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä</a></u>"
                soundtrack_link = "<u><a href='" + film[10] + "'>–ü–æ—Å–ª—É—à–∞—Ç—å —Å–∞—É–Ω–¥—Ç—Ä–µ–∫</a></u>"

                message = f"üé¨ {name}\n"
                message += f"üåç {country}\n"
                message += f"üé∂ {genre}\n"
                message += f"‚è±Ô∏è {duration}\n"
                message += f"üîû {age_limit}\n\n"
                message += f"{description}\n\n"
                message += f"üìä {rate_kp}\n"
                message += f"üìà {rate_imdb}\n\n"
                message += f"üé• {trailer_link}\n"
                message += f"üéµ {soundtrack_link}"

                photo_name = get_image_from_url(film[13])
                existing_data[id]["current"] = film[0]
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω ‚úÖ", callback_data="viewed"))
                keyboard.add(types.InlineKeyboardButton(text="–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å ‚ùå", callback_data="bad_recommendation"))
                keyboard.add(types.InlineKeyboardButton(text="–ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç ‚û°Ô∏è", callback_data="next_film"))
                with open(photo_name, "rb") as photo_file:
                    await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(photo_file), caption=message, parse_mode="HTML", reply_markup=keyboard)
                os.remove(photo_name)

            else:
                await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å! üïµÔ∏è‚Äç‚ôÇÔ∏èüîç")
        else:
            await call.message.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ!")
            existing_data[id]["search"] = False
            if existing_data[id]["current"] not in existing_data[id]["viewed"]:
                existing_data[id]["viewed"].append(existing_data[id]["current"])
            existing_data[id]["films_list"].pop(0)
            await call.answer()
            await call.message.edit_reply_markup(reply_markup=None)

        with open('requests_info.json', 'w', encoding='utf-8') as json_file:
            json.dump(existing_data, json_file, indent=4, ensure_ascii=False)

    except Exception as e:
        await call.answer("–û–π, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –Ω–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—à–∏–±–∫–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ò—Å–∫—Ä–µ–Ω–Ω–µ –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å. üòäüõ†Ô∏è")
        with open("errors.txt", 'a', encoding="utf-8") as text_file:
            text_file.write(str(e) + str(existing_data[id]))
            text_file.write("\n")


@dp.callback_query_handler(text="bad_recommendation")
async def bad_recommendation_handler(call: types.CallbackQuery):
    try:
        id = str(call.from_user.id)
        flag = True
        with open('requests_info.json', 'r', encoding='utf-8') as json_file:
            existing_data = json.load(json_file)

        if not existing_data[id]["search"]:
            await call.message.answer("–§–∏–ª—å–º –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ø–∞–¥–µ—Ç –∫ —Ç–µ–±–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            await call.message.answer("–ò—â—É –Ω–æ–≤—ã–π...")
            existing_data[id]["viewed"].append(existing_data[id]["current"])
            existing_data[id]["films_list"].pop(0)
            if len(existing_data[id]["films_list"]) > 0:
                existing_data[id]["current"] = existing_data[id]["films_list"][0]
            else:
                flag = False
            await call.answer()
            await call.message.edit_reply_markup(reply_markup=None)

            if flag:
                query = "SELECT * FROM films WHERE id = ?"
                result = cursor.execute(query, (existing_data[id]["current"],)).fetchall()
                film = result[0]
                name = f"<i>{film[1]}</i> ({film[4]})"
                genre = f"<b>–ñ–∞–Ω—Ä—ã:</b> <i>{', '.join(film[2].split(';'))}</i>"
                duration = f"<b>{human_duration(film[3])}</b>"
                country = f"<b>–°—Ç—Ä–∞–Ω—ã-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏:</b> <i>{', '.join(film[5].split(';'))}</i>"
                rate_kp = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ:</b> {film[6]}"
                rate_imdb = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ IMDB:</b> {film[7]}"
                age_limit = f"<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {film[11]}+</b>"
                description = f"<i>{film[8]}</i>"
                trailer_link = "<u><a href='" + film[9] + "'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä</a></u>"
                soundtrack_link = "<u><a href='" + film[10] + "'>–ü–æ—Å–ª—É—à–∞—Ç—å —Å–∞—É–Ω–¥—Ç—Ä–µ–∫</a></u>"

                message = f"üé¨ {name}\n"
                message += f"üåç {country}\n"
                message += f"üé∂ {genre}\n"
                message += f"‚è±Ô∏è {duration}\n"
                message += f"üîû {age_limit}\n\n"
                message += f"{description}\n\n"
                message += f"üìä {rate_kp}\n"
                message += f"üìà {rate_imdb}\n\n"
                message += f"üé• {trailer_link}\n"
                message += f"üéµ {soundtrack_link}"

                photo_name = get_image_from_url(film[13])
                existing_data[id]["current"] = film[0]
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω ‚úÖ", callback_data="viewed"))
                keyboard.add(types.InlineKeyboardButton(text="–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å ‚ùå", callback_data="bad_recommendation"))
                keyboard.add(types.InlineKeyboardButton(text="–ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç ‚û°Ô∏è", callback_data="next_film"))
                with open(photo_name, "rb") as photo_file:
                    await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(photo_file), caption=message, parse_mode="HTML", reply_markup=keyboard)
                os.remove(photo_name)

            else:
                await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å! üïµÔ∏è‚Äç‚ôÇÔ∏èüîç")
            with open('requests_info.json', 'w', encoding='utf-8') as json_file:
                json.dump(existing_data, json_file, indent=4, ensure_ascii=False)

    except Exception as e:
        await call.answer("–û–π, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –Ω–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—à–∏–±–∫–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ò—Å–∫—Ä–µ–Ω–Ω–µ –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å. üòäüõ†Ô∏è")
        with open("errors.txt", 'a', encoding="utf-8") as text_file:
            text_file.write(str(e) + str(existing_data[id]))
            text_file.write("\n")


@dp.callback_query_handler(text="next_film")
async def next_film_handler(call: types.CallbackQuery):
    try:
        id = str(call.from_user.id)
        flag = True
        with open('requests_info.json', 'r', encoding='utf-8') as json_file:
            existing_data = json.load(json_file)

        if not existing_data[id]["search"]:
            await call.message.answer("–ò—â—É –Ω–æ–≤—ã–π...")
            existing_data[id]["films_list"].pop(0)
            if len(existing_data[id]["films_list"]) > 0:
                existing_data[id]["current"] = existing_data[id]["films_list"][0]
            else:
                flag = False
            await call.answer()
            await call.message.edit_reply_markup(reply_markup=None)

            if flag:
                query = "SELECT * FROM films WHERE id = ?"
                result = cursor.execute(query, (existing_data[id]["current"],)).fetchall()
                film = result[0]
                name = f"<i>{film[1]}</i> ({film[4]})"
                genre = f"<b>–ñ–∞–Ω—Ä—ã:</b> <i>{', '.join(film[2].split(';'))}</i>"
                duration = f"<b>{human_duration(film[3])}</b>"
                country = f"<b>–°—Ç—Ä–∞–Ω—ã-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏:</b> <i>{', '.join(film[5].split(';'))}</i>"
                rate_kp = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ:</b> {film[6]}"
                rate_imdb = f"<b>–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ IMDB:</b> {film[7]}"
                age_limit = f"<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {film[11]}+</b>"
                description = f"<i>{film[8]}</i>"
                trailer_link = "<u><a href='" + film[9] + "'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä</a></u>"
                soundtrack_link = "<u><a href='" + film[10] + "'>–ü–æ—Å–ª—É—à–∞—Ç—å —Å–∞—É–Ω–¥—Ç—Ä–µ–∫</a></u>"

                message = f"üé¨ {name}\n"
                message += f"üåç {country}\n"
                message += f"üé∂ {genre}\n"
                message += f"‚è±Ô∏è {duration}\n"
                message += f"üîû {age_limit}\n\n"
                message += f"{description}\n\n"
                message += f"üìä {rate_kp}\n"
                message += f"üìà {rate_imdb}\n\n"
                message += f"üé• {trailer_link}\n"
                message += f"üéµ {soundtrack_link}"

                photo_name = get_image_from_url(film[13])
                existing_data[id]["current"] = film[0]
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω ‚úÖ", callback_data="viewed"))
                keyboard.add(types.InlineKeyboardButton(text="–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å ‚ùå", callback_data="bad_recommendation"))
                keyboard.add(types.InlineKeyboardButton(text="–ï—â–µ –≤–∞—Ä–∏–∞–Ω—Ç ‚û°Ô∏è", callback_data="next_film"))
                with open(photo_name, "rb") as photo_file:
                    await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(photo_file), caption=message, parse_mode="HTML", reply_markup=keyboard)
                os.remove(photo_name)

            else:
                await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å! üïµÔ∏è‚Äç‚ôÇÔ∏èüîç")
            with open('requests_info.json', 'w', encoding='utf-8') as json_file:
                json.dump(existing_data, json_file, indent=4, ensure_ascii=False)

    except Exception as e:
        await call.answer("–û–π, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –Ω–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—à–∏–±–∫–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ò—Å–∫—Ä–µ–Ω–Ω–µ –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å. üòäüõ†Ô∏è")
        with open("errors.txt", 'a', encoding="utf-8") as text_file:
            text_file.write(str(e) + str(existing_data[id]))
            text_file.write("\n")


# –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def duration_converter(duration_list):
    duration_list.sort()
    range = [0, 1000]

    if len(duration_list) == 0 or "–õ—é–±–∞—è ‚è±Ô∏è" in duration_list:
        return range
    if duration_list == ["1-2 —á–∞—Å–∞"]:
        range = [40, 120]
    elif duration_list == ["2-3 —á–∞—Å–∞"]:
        range = [120, 180]
    elif duration_list == ["–±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤"]:
        range = [180, 1000]
    elif duration_list == ["1-2 —á–∞—Å–∞", "2-3 —á–∞—Å–∞"]:
        range = [40, 180]
    elif duration_list == ["1-2 —á–∞—Å–∞", "2-3 —á–∞—Å–∞", "–±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤"] or duration_list == ["1-2 —á–∞—Å–∞", "–±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤"]:
        range = [40, 1000]
    elif duration_list == ["2-3 —á–∞—Å–∞", "–±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤"]:
        range = [120, 1000]
    return range


# –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≥–æ–¥–∞ —Å—ä–µ–º–∫–∏ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def year_converter(year_list):
    year_list.sort()
    range = [1900, 2230]

    if len(year_list) == 0:
        return range
    if "–¥–æ 1970-—Ö" in year_list:
        range[0] = 1900
        if len(year_list) == 1:
            return [1900, 1970]
        year_list.remove("–¥–æ 1970-—Ö")
        year_list.sort()
    if "–õ—é–±–æ–π ‚è≥" in year_list:
        return [1900, 2230]
    else:
        range[0] = int(year_list[0].split("-")[0])
    if "2020-" in year_list:
        range[1] = 2230
    else:
        range[1] = int(year_list[-1].split("-")[1])
    return range


# –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def age_converter(age_list):
    age_list.sort()
    age_value = 0

    if len(age_list) == 0 or "–õ—é–±–æ–µ üÜó" in age_list:
        return age_value
    age_value = int(age_list[0].split("+")[0])
    return age_value


# –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def rate_kp_converter(rate_list):
    only_rate_list = [int(value.split()[-1].split("+")[0]) for value in rate_list if value != "–õ—é–±–æ–π ‚û°Ô∏è"]
    if len(only_rate_list) < len(rate_list) or len(rate_list) == 0:
        return 0
    only_rate_list.sort()
    return min(only_rate_list)


# –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ IMDB –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def rate_imdb_converter(rate_list):
    only_rate_list = [int(value.split()[-1].split("+")[0]) for value in rate_list if value != "–õ—é–±–æ–π ‚úÖ"]
    if len(only_rate_list) < len(rate_list) or len(rate_list) == 0:
        return 0
    only_rate_list.sort()
    return min(only_rate_list)


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)